{"version":3,"file":"static/js/525.c97208f2.chunk.js","mappings":"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","sources":["components/Settings/components.ts","components/Settings/SettingsButton/components.ts","components/Settings/SettingsButton/MyButton/components.ts","components/Settings/SettingsButton/MyButton/MyButton.tsx","components/Settings/SettingsButton/SettingsButton.tsx","components/Settings/SwitchTheme/components.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/Settings/SwitchTheme/SwitchSelect/components.ts","components/Settings/SwitchTheme/SwitchSelect/SwitchSelect.tsx","components/Settings/SwitchTheme/SwitchTheme.tsx","components/Settings/Settings.tsx","pages/SettingsPage/SettingsPage.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  font-size: 30px;\n  margin-bottom: 15px;\n  margin-top: 10px;\n  text-align: center;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin-top: 5px;\n`;\n","import styled from 'styled-components';\n\nimport { ThemeType } from '../../../../types/themeType';\n\nexport const StyledButton = styled.button`\n  height: 30px;\n  width: 120px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 20px;\n  border: ${({ theme }: ThemeType) => theme.border} 3px solid;\n  background: ${({ theme }: ThemeType) => theme.buttonsBgc};\n  color: ${({ theme }: ThemeType) => theme.color};\n  text-transform: uppercase;\n\n  &:hover {\n    background: ${({ theme }: ThemeType) => theme.hoverBgc};\n    border: outset 4px ${({ theme }: ThemeType) => theme.hoverBgc};\n  }\n\n  &:active {\n    border: inset 4px ${({ theme }: ThemeType) => theme.hoverBgc};\n  }\n\n  @media (max-width: 520px) {\n    font-size: 18px;\n    height: 25px;\n    width: 100px;\n  }\n\n  @media (max-width: 420px) {\n    font-size: 15px;\n    height: 22px;\n    width: 70px;\n  }\n`;\n","import React, { memo } from 'react';\n\nimport { ReturnComponentType } from '../../../../types/ReturnComponentType';\n\nimport { StyledButton } from './components';\nimport { MyButtonType } from './types';\n\nexport const MyButton: React.FC<MyButtonType> = memo(\n  ({ children, callback }): ReturnComponentType => (\n    <StyledButton onClick={callback} type=\"button\">\n      {children}\n    </StyledButton>\n  ),\n);\n","import React, { memo } from 'react';\n\nimport { SettingsTitle } from '../../../layouts';\nimport { ReturnComponentType } from '../../../types/ReturnComponentType';\n\nimport { Container } from './components';\nimport { MyButton } from './MyButton';\nimport { SettingsButtonPropsType } from './types';\n\nexport const SettingsButton: React.FC<SettingsButtonPropsType> = memo(\n  ({ title, text, callback }): ReturnComponentType => (\n    <Container>\n      <SettingsTitle>{title}</SettingsTitle>\n      <MyButton callback={callback}>{text}</MyButton>\n    </Container>\n  ),\n);\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  margin-top: 5px;\n`;\n\nexport const Title = styled.h1`\n  font-size: 28px;\n\n  @media (max-width: 520px) {\n    font-size: 20px;\n  }\n\n  @media (max-width: 420px) {\n    font-size: 18px;\n  }\n`;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import styled from 'styled-components';\n\nimport { ThemeType } from '../../../../types/themeType';\n\nexport const StyledSelect = styled.select`\n  width: 300px;\n  padding: 4px 55px 4px 5px;\n  cursor: pointer;\n  background: ${({ theme }: ThemeType) => theme.buttonsBgc};\n  appearance: auto;\n  border: ${({ theme }: ThemeType) => theme.border} solid 2px;\n  border-radius: 3px;\n  color: ${({ theme }: ThemeType) => theme.color};\n  font-size: 20px;\n\n  &:focus {\n    outline: none;\n  }\n\n  @media (max-width: 520px) {\n    font-size: 16px;\n    width: 240px;\n  }\n\n  @media (max-width: 420px) {\n    font-size: 14px;\n    width: 210px;\n  }\n`;\n\nexport const StyledOption = styled.option`\n  color: ${({ theme }: ThemeType) => theme.color};\n  cursor: pointer;\n\n  &:checked {\n    font-weight: 700;\n    background: ${({ theme }: ThemeType) => theme.hoverBgc};\n  }\n`;\n","import React, { memo } from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport { themes } from '../../../../constants';\nimport { getThemeValue } from '../../../../selectors';\nimport { ReturnComponentType } from '../../../../types/ReturnComponentType';\n\nimport { StyledOption, StyledSelect } from './components';\n\nexport const SwitchSelect = memo(\n  ({ changeSelectValue, ...restProps }: any): ReturnComponentType => {\n    const currentTheme = useSelector(getThemeValue);\n\n    return (\n      <StyledSelect onChange={changeSelectValue} {...restProps}>\n        <StyledOption value={currentTheme}>chosen theme: {currentTheme}</StyledOption>\n        {themes\n          ? themes.map(theme => (\n              <StyledOption key={theme} value={theme}>\n                {theme}\n              </StyledOption>\n            ))\n          : []}\n      </StyledSelect>\n    );\n  },\n);\n","import React, { ChangeEvent, useCallback } from 'react';\n\nimport { useDispatch } from 'react-redux';\n\nimport { SettingsTitle } from '../../../layouts';\nimport { themeActions } from '../../../reducers';\nimport { MainThemeType } from '../../../reducers/themeReducer/types';\nimport { ReturnComponentType } from '../../../types/ReturnComponentType';\n\nimport { Container } from './components';\nimport { SwitchSelect } from './SwitchSelect';\nimport { DefaultSelectType } from './types';\n\nexport const SwitchTheme: React.FC<DefaultSelectType> = ({\n  onChange,\n}): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const changeSelectValue = useCallback((e: ChangeEvent<HTMLSelectElement>): void => {\n    onChange && onChange(e);\n    dispatch(themeActions.changeTheme(e.currentTarget.value as MainThemeType));\n  }, []);\n\n  return (\n    <Container>\n      <SettingsTitle>Color them:</SettingsTitle>\n      <SwitchSelect changeSelectValue={changeSelectValue} />\n    </Container>\n  );\n};\n","import React, { memo } from 'react';\n\nimport { SettingsContainer } from '../../layouts';\nimport { ReturnComponentType } from '../../types/ReturnComponentType';\n\nimport { Title } from './components';\nimport { SettingsButton } from './SettingsButton';\nimport { SwitchTheme } from './SwitchTheme';\nimport { SettingsPropsType } from './types';\n\nexport const Settings = memo(\n  ({\n    textSwitchValue,\n    setHistoryBlockVisibility,\n    resetAllSettings,\n  }: SettingsPropsType): ReturnComponentType => (\n    <SettingsContainer>\n      <Title>Settings</Title>\n      <SettingsButton\n        title=\"Set history block visibility 👀:\"\n        text={textSwitchValue}\n        callback={setHistoryBlockVisibility}\n      />\n      <SettingsButton\n        title=\"Reset all settings 🛠:\"\n        text=\"reset\"\n        callback={resetAllSettings}\n      />\n      <SwitchTheme />\n    </SettingsContainer>\n  ),\n);\n\nexport default Settings;\n","import React, { useCallback } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Settings from '../../components/Settings/Settings';\nimport { SettingsContainer } from '../../layouts';\nimport { calculatorAction, themeActions } from '../../reducers';\nimport { getIsShowControlPanel } from '../../selectors';\nimport { ReturnComponentType } from '../../types/ReturnComponentType';\n\nconst SettingsPage = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const isShowControlPanel = useSelector(getIsShowControlPanel);\n\n  const setHistoryBlockVisibility = useCallback((): void => {\n    dispatch(calculatorAction.setControlPanelVisibility(!isShowControlPanel));\n  }, [dispatch, isShowControlPanel]);\n\n  const resetAllSettings = useCallback((): void => {\n    dispatch(calculatorAction.setControlPanelVisibility(true));\n    dispatch(themeActions.changeTheme('dark'));\n  }, [dispatch]);\n\n  const textSwitchValue = isShowControlPanel ? 'hide' : 'show';\n\n  return (\n    <SettingsContainer>\n      <Settings\n        textSwitchValue={textSwitchValue}\n        setHistoryBlockVisibility={setHistoryBlockVisibility}\n        resetAllSettings={resetAllSettings}\n      />\n    </SettingsContainer>\n  );\n};\n\nexport default SettingsPage;\n"],"names":["Title","styled","Container","StyledButton","theme","border","buttonsBgc","color","hoverBgc","MyButton","memo","children","callback","onClick","type","SettingsButton","title","text","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","StyledSelect","StyledOption","SwitchSelect","changeSelectValue","restProps","currentTheme","useSelector","getThemeValue","onChange","value","themes","SwitchTheme","dispatch","useDispatch","useCallback","e","themeActions","currentTarget","textSwitchValue","setHistoryBlockVisibility","resetAllSettings","isShowControlPanel","getIsShowControlPanel","calculatorAction"],"sourceRoot":""}